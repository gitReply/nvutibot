# --- file: app/bot.py
import asyncio
import secrets
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, PreCheckoutQuery, LabeledPrice,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)
from sqlalchemy import select, update
from app.config import settings
from app.db import async_session, Base, engine
from app.models import User, Transaction, Game, Notification

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
@dp.startup()
async def on_startup_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—ã–¥–∞—á–∞ –∫–Ω–æ–ø–∫–∏ MiniApp
@dp.message(CommandStart())
async def cmd_start(msg: Message):
    async with async_session() as s:
        user = await s.scalar(select(User).where(User.telegram_id == str(msg.from_user.id)))
        if not user:
            code = secrets.token_hex(4)
            user = User(
                telegram_id=str(msg.from_user.id),
                username=msg.from_user.username or msg.from_user.full_name,
                stars=0,
                bonus=0,
                referral_code=code,
                referred_by=None,
                is_admin=(msg.from_user.id == settings.ADMIN_ID)
            )
            s.add(user)
            await s.commit()
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å –≤ NVUTI", web_app=WebAppInfo(url=settings.WEBAPP_URL))
    ]])
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NVUTI Stars Casino! üí´", reply_markup=kb)

# /set_rtp <percent> - –∞–¥–º–∏–Ω
@dp.message(Command("set_rtp"))
async def cmd_set_rtp(msg: Message):
    if msg.from_user.id != settings.ADMIN_ID:
        return
    parts = msg.text.split()
    if len(parts)!=2 or not parts[1].isdigit():
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_rtp <—Ü–µ–ª—ã–π_–ø—Ä–æ—Ü–µ–Ω—Ç>")
    settings.RTP_PERCENT = int(parts[1])
    await msg.answer(f"RTP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {settings.RTP_PERCENT}%")

# /set_ref <percent> - –∞–¥–º–∏–Ω
@dp.message(Command("set_ref"))
async def cmd_set_ref(msg: Message):
    if msg.from_user.id != settings.ADMIN_ID:
        return
    parts = msg.text.split()
    if len(parts)!=2 or not parts[1].isdigit():
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_ref <—Ü–µ–ª—ã–π_–ø—Ä–æ—Ü–µ–Ω—Ç>")
    settings.REFERRAL_PERCENT = int(parts[1])
    await msg.answer(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {settings.REFERRAL_PERCENT}%")

# /withdraw <N> - –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
@dp.message(Command("withdraw"))
async def cmd_withdraw(msg: Message):
    parts = msg.text.split()
    if len(parts)!=2 or not parts[1].isdigit():
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /withdraw <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–≤—ë–∑–¥>")
    amount = int(parts[1])
    async with async_session() as s:
        user = await s.scalar(select(User).where(User.telegram_id==str(msg.from_user.id)))
        if not user or user.stars < amount:
            return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.")
        user.stars -= amount
        s.add(Transaction(user_id=user.id, type="withdraw", amount=-amount))
        await s.commit()
    await msg.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚≠ê –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

# –ò–≥—Ä–æ–≤–æ–π WebApp-–ø–ª–∞—Ç—ë–∂ (Stars)
@dp.message(Command("deposit"))
async def cmd_deposit(msg: Message):
    prices = [LabeledPrice(label="–ó–≤—ë–∑–¥—ã", amount=100)]  # 1.00 XTR = 100
    await bot.send_invoice(
        chat_id=msg.chat.id,
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ NVUTI Stars",
        description="–ö—É–ø–∏—Ç–µ –∑–≤—ë–∑–¥—ã –¥–ª—è –∏–≥—Ä—ã",
        payload=f"deposit:{msg.from_user.id}",
        provider_token="",  # –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è XTR
        currency="XTR",
        prices=prices
    )

@dp.pre_checkout_query()
async def pre_checkout(query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(query.id, ok=True)

@dp.message(F.successful_payment)
async def pay_success(msg: Message):
    pay = msg.successful_payment
    user_id_str, _ = pay.invoice_payload.split(":")
    stars = pay.total_amount  # —É–∂–µ —Ü–µ–ª–æ–µ –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥
    async with async_session() as s:
        user = await s.scalar(select(User).where(User.telegram_id==user_id_str))
        if not user:
            return
        user.stars += stars
        s.add(Transaction(user_id=user.id, type="deposit", amount=stars))
        # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        if user.referred_by:
            bonus = stars * settings.REFERRAL_PERCENT // 100
            ref = await s.get(User, user.referred_by)
            if ref:
                ref.stars += bonus
                s.add(Transaction(user_id=ref.id, type="referral", amount=bonus))
        await s.commit()
    await msg.answer(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {stars}‚≠ê –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! Balance: {user.stars}‚≠ê")

# –ó–∞–ø—É—Å–∫ polling
def start_bot():
    dp.run_polling(bot)

if __name__ == "__main__":
    start_bot()
